# [Best Time to Buy and Sell Stock](https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/)

You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.

You want to maximize your profit by choosing a **single day** to buy one stock and choosing a **different day in the future** to sell that stock.

Return *the maximum profit you can achieve from this transaction*. If you cannot achieve any profit, return `0`.

 

**Example 1:**

```
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
```

**Example 2:**

```
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
```

```javascript
/**
 * @param {number[]} prices
 * @return {number}
 */
const maxProfit = (prices) => {
    
}
```

**Constraints:**

- `1 <= prices.length <= 105`
- `0 <= prices[i] <= 104`

## Solution Approach

To get the maximum profit, we first need to declare a variable `minPrice` initialized with `Infinity` and a variable `maxProfit` initialized with 0.

Then we use a for..of loop on `prices`. In each iteration, we need to do two things:

1. If the current `price` is less than `minPrice`, we reassign `minPrice` to `price`
2. If `price` minus `minPrice` is greater than `maxProfit`, we reassign `maxProfit` to `price` minus `minPrice`.

Once the loop is over, we return `maxProfit`.

<audio src="../../Downloads/2024-07-19-141114_132987.mp3"></audio>

## Full Code

```js
/**
 * @param {number[]} prices
 * @return {number}
 */
const maxProfit = (prices) => {
    let minPrice = Infinity
    let maxProfit = 0

    for (const price of prices) {
        if(price < minPrice){
            minPrice = price
        } else if(price - minPrice > maxProfit) {
            maxProfit = price - minPrice
        }
    }
    
    return maxProfit
}
```

