# Majority Element

Given an array `nums` of size `n`, return *the majority element*.

The majority element is the element that appears more than `⌊n / 2⌋` times. You may assume that the majority element always exists in the array.

 

**Example 1:**

```
Input: nums = [3,2,3]
Output: 3
```

**Example 2:**

```
Input: nums = [2,2,1,1,1,2,2]
Output: 2
```

 

**Constraints:**

- `n == nums.length`
- `1 <= n <= 5 * 104`
- `-109 <= nums[i] <= 109`

 

**Follow-up:** Could you solve the problem in linear time and in `O(1)` space?

## Solution Approach

To find the majority element in an array of numbers, we can use the Boyer-Moore voting algorithm.

We need a variable `candidate` and a variable `count`, then use a for...of loop to iterate over `nums`. In the loop, we update `candidate` and `count` based on the following rules:

1. If `count` is 0, update `candidate` to the current number and set `count` to 1.
2. If the current number is equal to `candidate`, increment `count` by 1; otherwise, decrement `count` by 1.

When the iteration is over, `candidate` is the majority element.

## Full Code

```js
var majorityElement = function(nums) {
    let candidate = null
    let count = 0
    for(num of nums){
        if(count===0){
            candidate = num
        }
        count += (candidate===num)?1:-1
    }
    return candidate
};
```

